version: '3.8'

# ==================================================
# 电商微服务 Docker Compose 配置
# DDD + gRPC + Orchestrator 架构部署
# ==================================================

networks:
  ecommerce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql-data:
  redis-data:
  nacos-data:
  prometheus-data:
  grafana-data:

services:
  # ==================================================
  # 基础设施服务
  # ==================================================
  
  # MySQL数据库
  mysql:
    image: mysql:8.0
    container_name: ecommerce-mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ecommerce123
      MYSQL_DATABASE: ecommerce_user
      TZ: Asia/Shanghai
    volumes:
      - mysql-data:/var/lib/mysql
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/conf.d:/etc/mysql/conf.d:ro
    command: [
      'mysqld',
      '--innodb-buffer-pool-size=512M',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--default-time-zone=+08:00',
      '--lower-case-table-names=1'
    ]
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.10
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.11
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nacos注册中心
  nacos:
    image: nacos/nacos-server:v2.2.3
    container_name: ecommerce-nacos
    ports:
      - "8848:8848"
      - "9848:9848"
    environment:
      MODE: standalone
      NACOS_SERVER_PORT: 8848
      NACOS_APPLICATION_PORT: 8848
      SPRING_DATASOURCE_PLATFORM: mysql
      MYSQL_SERVICE_HOST: mysql
      MYSQL_SERVICE_PORT: 3306
      MYSQL_SERVICE_DB_NAME: nacos_config
      MYSQL_SERVICE_USER: root
      MYSQL_SERVICE_PASSWORD: ecommerce123
      TZ: Asia/Shanghai
    volumes:
      - nacos-data:/home/nacos/data
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.12
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8848/nacos/v1/ns/operator/metrics"]
      interval: 15s
      timeout: 10s
      retries: 3

  # RocketMQ NameServer
  rocketmq-nameserver:
    image: apache/rocketmq:5.1.4
    container_name: ecommerce-rocketmq-nameserver
    ports:
      - "9876:9876"
    command: ["mqnamesrv"]
    environment:
      - JAVA_OPT_EXT=-Xms512m -Xmx512m
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.13
    restart: unless-stopped

  # RocketMQ Broker
  rocketmq-broker:
    image: apache/rocketmq:5.1.4
    container_name: ecommerce-rocketmq-broker
    ports:
      - "10911:10911"
      - "10909:10909"
    command: ["mqbroker", "-n", "rocketmq-nameserver:9876", "-c", "/home/rocketmq/rocketmq-5.1.4/conf/broker.conf"]
    environment:
      - JAVA_OPT_EXT=-Xms1g -Xmx1g
    volumes:
      - ./docker/rocketmq/broker.conf:/home/rocketmq/rocketmq-5.1.4/conf/broker.conf:ro
    depends_on:
      - rocketmq-nameserver
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.14
    restart: unless-stopped

  # ==================================================
  # 微服务应用
  # ==================================================

  # API网关
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: ecommerce-api-gateway
    ports:
      - "8000:8000"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      nacos:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.20
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 编排服务
  orchestrator-service:
    build:
      context: ./orchestrator-service
      dockerfile: Dockerfile
    container_name: ecommerce-orchestrator
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ROCKETMQ_NAMESERVER=rocketmq-nameserver:9876
    depends_on:
      nacos:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.21
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户服务
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: ecommerce-user-service
    ports:
      - "8001:8001"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_user
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.31
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 商品服务
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: ecommerce-product-service
    ports:
      - "8002:8002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_product
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.32
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 库存服务
  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    container_name: ecommerce-inventory-service
    ports:
      - "8003:8003"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_inventory
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.33
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 订单服务
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: ecommerce-order-service
    ports:
      - "8004:8004"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_order
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.34
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 支付服务
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: ecommerce-payment-service
    ports:
      - "8005:8005"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_payment
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.35
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 通知服务
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: ecommerce-notification-service
    ports:
      - "8006:8006"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - NACOS_SERVER_ADDR=nacos:8848
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=ecommerce_notification
      - MYSQL_USERNAME=root
      - MYSQL_PASSWORD=ecommerce123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ROCKETMQ_NAMESERVER=rocketmq-nameserver:9876
    depends_on:
      mysql:
        condition: service_healthy
      nacos:
        condition: service_healthy
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.36
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================================================
  # 监控和观测性
  # ==================================================

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - prometheus-data:/prometheus
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.40
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ecommerce-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ecommerce123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.41
    restart: unless-stopped

  # Jaeger链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: ecommerce-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.42
    restart: unless-stopped

  # ==================================================
  # 开发工具
  # ==================================================

  # RocketMQ Console
  rocketmq-console:
    image: styletang/rocketmq-console-ng:latest
    container_name: ecommerce-rocketmq-console
    ports:
      - "8180:8080"
    environment:
      - JAVA_OPTS=-Drocketmq.namesrv.addr=rocketmq-nameserver:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false
    depends_on:
      - rocketmq-nameserver
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.50
    restart: unless-stopped

  # Redis Commander
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce-redis-commander
    ports:
      - "8181:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      ecommerce-network:
        ipv4_address: 172.20.0.51
    restart: unless-stopped